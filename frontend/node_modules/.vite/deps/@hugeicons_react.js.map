{
  "version": 3,
  "sources": ["../../@hugeicons/react/src/HugeiconsIcon.tsx"],
  "sourcesContent": ["import { createElement, forwardRef, ForwardRefExoticComponent, RefAttributes, SVGProps } from 'react';\n\nconst defaultAttributes = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none',\n};\n\nexport type IconSvgElement = readonly (readonly [string, { readonly [key: string]: string | number }])[];\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>;\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes;\n\nexport interface HugeiconsProps extends ComponentAttributes {\n  size?: string | number;\n  strokeWidth?: number;\n  absoluteStrokeWidth?: boolean;\n  altIcon?: IconSvgElement;\n  showAlt?: boolean;\n  icon?: IconSvgElement;\n}\n\nexport interface HugeiconsIconProps extends Omit<HugeiconsProps, 'ref' | 'altIcon'> {\n  icon: IconSvgElement;\n  altIcon?: IconSvgElement;\n}\n\nexport type HugeiconsIcon = ForwardRefExoticComponent<HugeiconsProps>;\n\nexport const HugeiconsIcon = forwardRef<SVGSVGElement, HugeiconsIconProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth,\n      absoluteStrokeWidth = false,\n      className = '',\n      altIcon,\n      showAlt = false,\n      icon,\n      ...rest\n    },\n    ref,\n  ) => {\n    const calculatedStrokeWidth = strokeWidth !== undefined\n      ? (absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth)\n      : undefined;\n\n    const strokeProps: { stroke?: string; strokeWidth?: number } = calculatedStrokeWidth !== undefined ? {\n      strokeWidth: calculatedStrokeWidth,\n      stroke: 'currentColor'\n    } : {};\n\n    const elementProps = {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      color,\n      className,\n      ...strokeProps,\n      ...rest,\n    };\n\n    const currentIcon = (showAlt && altIcon) ? altIcon : icon;\n\n    // Create SVG children without adding them as an icon prop\n    const svgChildren = currentIcon.map(([tag, attrs]) => {\n      return createElement(tag, { \n        ...attrs, \n        ...strokeProps,\n        key: attrs.key \n      });\n    });\n\n    return createElement(\n      'svg',\n      elementProps,\n      svgChildren\n    );\n  },\n);\n\nHugeiconsIcon.displayName = 'HugeiconsIcon';\n\nexport default HugeiconsIcon; "],
  "mappings": ";;;;;;;;;AAEA,IAAM,oBAAoB;EACxB,OAAO;EACP,OAAO;EACP,QAAQ;EACR,SAAS;EACT,MAAM;;AAwBK,IAAA,oBAAgB,yBAC3B,CACE,EACE,QAAQ,gBACR,OAAO,IACP,aACA,sBAAsB,OACtB,YAAY,IACZ,SACA,UAAU,OACV,MACA,GAAG,KAAI,GAET,QACE;AACF,QAAM,wBAAwB,gBAAgB,SACzC,sBAAuB,OAAO,WAAW,IAAI,KAAM,OAAO,IAAI,IAAI,cACnE;AAEJ,QAAM,cAAyD,0BAA0B,SAAY;IACnG,aAAa;IACb,QAAQ;MACN,CAAA;AAEJ,QAAM,eAAe;IACnB;IACA,GAAG;IACH,OAAO;IACP,QAAQ;IACR;IACA;IACA,GAAG;IACH,GAAG;;AAGL,QAAM,cAAe,WAAW,UAAW,UAAU;AAGrD,QAAM,cAAc,YAAY,IAAI,CAAC,CAAC,KAAK,KAAK,MAAK;AACnD,eAAO,4BAAc,KAAK;MACxB,GAAG;MACH,GAAG;MACH,KAAK,MAAM;IACZ,CAAA;EACH,CAAC;AAED,aAAO,4BACL,OACA,cACA,WAAW;AAEf,CAAC;AAGH,cAAc,cAAc;",
  "names": []
}
